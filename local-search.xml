<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DLL挟持</title>
    <link href="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/"/>
    <url>/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/</url>
    
    <content type="html"><![CDATA[<h1 id="DLL挟持分享"><a href="#DLL挟持分享" class="headerlink" title="DLL挟持分享"></a>DLL挟持分享</h1><h1 id="1-什么是dll"><a href="#1-什么是dll" class="headerlink" title="1 什么是dll"></a>1 什么是dll</h1><p>动态链接库的目的就是使软件的体积变小，把功能封装到dll文件里，当exe启动的时候可以动态的调用dll文件。</p><p>编译的时候使用x86编译只能32位的程序去用，x64的编译只能x64的程序能用</p><p>简单理解一下DLL</p><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled.png" alt="Untitled"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br>#include <span class="hljs-string">&quot;pch.h&quot;</span><br><br>BOOL APIENTRY <span class="hljs-title function_">DllMain</span><span class="hljs-params">( HMODULE hModule, //dll加载入内存中的起点（句柄）</span><br><span class="hljs-params">                       DWORD  ul_reason_for_call, //dll加载的原因</span><br><span class="hljs-params">                       LPVOID lpReserved //</span><br><span class="hljs-params">                     )</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加导出函数</p><p>首先先添加def文件</p><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled%201.png" alt="Untitled"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">EXPORTS<br>fun1<br></code></pre></td></tr></table></figure><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled%202.png" alt="Untitled"></p><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled%203.png" alt="Untitled"></p><p>调用导出函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">#include&lt;stdio.h&gt;<br>#include&lt;Windows.h&gt;<br><br>typedef <span class="hljs-title function_">int</span><span class="hljs-params">(__stdcall* pfun)</span><span class="hljs-params">()</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">HMODULE</span> <span class="hljs-variable">dll1</span> <span class="hljs-operator">=</span> LoadLibraryA(<span class="hljs-string">&quot;C:\\Users\\ws\\source\\repos\\Dll3\\Debug\\dll3.dll&quot;</span>);<br><span class="hljs-comment">//通过函数名调用</span><br><span class="hljs-type">pfun</span> <span class="hljs-variable">wstest</span> <span class="hljs-operator">=</span> (pfun)GetProcAddress(dll1, <span class="hljs-string">&quot;funtest&quot;</span>);<br><span class="hljs-comment">//通过序号调用</span><br><span class="hljs-comment">//pfun wstest = (pfun)GetProcAddress(dll1, (LPCSTR)2);</span><br>printf(<span class="hljs-string">&quot;%d&quot;</span>, wstest());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DLL利用场景"><a href="#DLL利用场景" class="headerlink" title="DLL利用场景"></a>DLL利用场景</h1><p><a href="https://zhuanlan.zhihu.com/p/650357223?utm_id=0">揪出隐藏的内鬼“DLL白利用”</a></p><p>权限维持</p><p>白加黑上线</p><h1 id="2-DLL加载顺序"><a href="#2-DLL加载顺序" class="headerlink" title="2 DLL加载顺序"></a>2 DLL加载顺序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> 进程对应的应用程序所在目录（可理解为程序安装目录比如C:ProgramFilesuTorrent）；<br><span class="hljs-number">2</span> 系统目录（即%windir%system32）；<br><span class="hljs-number">3</span> <span class="hljs-number">16</span>位系统目录（即%windir%system）；<br><span class="hljs-number">4</span> Windows目录（即%windir%）；<br><span class="hljs-number">5</span> 当前目录（运行的某个文件所在目录，比如C:DocumentsandSettingsAdministratorDesktoptest）；<br><span class="hljs-number">6</span> PATH环境变量中的各个目录；<br></code></pre></td></tr></table></figure><h1 id="3-被保护的DLL"><a href="#3-被保护的DLL" class="headerlink" title="3 被保护的DLL"></a>3 被保护的DLL</h1><p>在注册表</p><p>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">kernel32.dll<br>wow64cpu.dll<br>wowarmhw.dll<br>xtajit.dll<br>advapi32.dll<br>clbcatq.dll<br>combase.dll<br>COMDLG32.dll<br>coml2.dll<br>difxapi.dll<br>gdi32.dll<br>gdiplus.dll<br>IMAGEHLP.dll<br>IMM32.dll<br>MSCTF.dll<br>MSVCRT.dll<br>NORMALIZ.dll<br>NSI.dll<br>ole32.dll<br>OLEAUT32.dll<br>PSAPI.DLL<br>rpcrt4.dll<br>sechost.dll<br>Setupapi.dll<br>SHCORE.dll<br>SHELL32.dll<br>SHLWAPI.dll<br>user32.dll<br>WLDAP32.dll<br>wow64.dll<br>wow64base.dll<br>wow64con.dll<br>wow64win.dll<br>WS2_32.dll<br>xtajit64.dll<br></code></pre></td></tr></table></figure><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled%204.png" alt="Untitled"></p><h1 id="4-DLL使用的工具"><a href="#4-DLL使用的工具" class="headerlink" title="4 DLL使用的工具"></a>4 DLL使用的工具</h1><h2 id="1-X64dbug"><a href="#1-X64dbug" class="headerlink" title="1 X64dbug"></a>1 X64dbug</h2><p>打开进程之后在符号一栏中可以看到调用的dll文件</p><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled%205.png" alt="Untitled"></p><h2 id="2-ProcessExplorer"><a href="#2-ProcessExplorer" class="headerlink" title="2 ProcessExplorer"></a>2 ProcessExplorer</h2><p>打开文件右上角搜索</p><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled%206.png" alt="Untitled"></p><h1 id="3-ProcessMonitor"><a href="#3-ProcessMonitor" class="headerlink" title="3 ProcessMonitor"></a>3 ProcessMonitor</h1><p><img src="/2023/10/11/DLL%E6%8C%9F%E6%8C%81%E5%88%86%E4%BA%AB%20/Untitled%207.png" alt="Untitled"></p><h1 id="5-如何发现可用DLL"><a href="#5-如何发现可用DLL" class="headerlink" title="5 如何发现可用DLL"></a>5 如何发现可用DLL</h1><p>以notepad++6.6 为例</p><p><a href="https://notepad-plus-plus.org/downloads/v6.6.6/">https://notepad-plus-plus.org/downloads/v6.6.6/</a></p><h1 id="6-DLL挟持具体实现"><a href="#6-DLL挟持具体实现" class="headerlink" title="6 DLL挟持具体实现"></a>6 DLL挟持具体实现</h1><h1 id="7-DLL挟持上线msf"><a href="#7-DLL挟持上线msf" class="headerlink" title="7 DLL挟持上线msf"></a>7 DLL挟持上线msf</h1>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀</tag>
      
      <tag>DLL挟持</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
